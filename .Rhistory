name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
plot_cor <- data_cor %>%
ggplot(aes(x = group, y = cor)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
name = "Neural Network",
limits = c(0.7,2.3),
labels = c("CNN \n (structure)", "Transformer \n (sequence)"),
breaks = (seq(from = 1.0, to = 2.0, by = 1))
) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
plot_cor <- data_cor %>%
ggplot(aes(x = group, y = cor)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
#name = "Neural Network",
limits = c(0.7,2.3),
labels = c("CNN \n (structure)", "Transformer \n (sequence)"),
breaks = (seq(from = 1.0, to = 2.0, by = 1))
) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
plot_cor <- data_cor %>%
ggplot(aes(x = group, y = cor)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
#name = "Neural Network",
name = "",
limits = c(0.7,2.3),
labels = c("CNN \n (structure)", "Transformer \n (sequence)"),
breaks = (seq(from = 1.0, to = 2.0, by = 1))
) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
ggsave(filename = paste0("./analysis/figures/neff_cor_cnn_bert.png"), plot = plot_cor, width = 6, height = 6)
plot_cor <- data_cor %>%
ggplot(aes(x = group, y = cor)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
# scale_x_continuous(
#   #name = "Neural Network",
#   name = "",
#   limits = c(0.7,2.3),
#   labels = c("CNN \n (structure)", "Transformer \n (sequence)"),
#   breaks = (seq(from = 1.0, to = 2.0, by = 1))
# ) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
plot_cor <- data_cor %>%
ggplot(aes(x = group, y = cor)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = cor+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
#name = "Neural Network",
name = "",
limits = c(0.7,2.3),
labels = c("CNN \n (structure)", "Transformer \n (sequence)"),
breaks = (seq(from = 1.0, to = 2.0, by = 1))
) +
scale_y_continuous(
name = "Correlation Coefficients",
limits = c(-0.1, 0.87),
breaks = seq(from = 0.0, to = 0.8, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#080845") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot_cor
#lets get mean correlations:
means_cor <- data_cor %>%
select(c(gene, cor, group))
View(means_cor)
#lets get mean correlations:
means_cor <- data_cor %>%
select(c(gene, cor, group)) %>%
group_by(group) %>%
summarise(mean = mean(cor))
View(means_cor)
View(means)
library(tidyverse)
library(cowplot)
library(data.table)
options(scipen = 999)
trans_data <- read.csv(file = "./output/PSICOV_BERT_predictions.csv", header=TRUE, sep=",")
cnn_data_all <- read.csv(file = "./output/cnn_wt_max_freq.csv", header=TRUE, sep=",")
align_data <- read.csv(file = "./output/stats_align_all.csv", header=TRUE, sep=",")
cnn_data <- cnn_data_all %>%
select(-c(aa_class, class_freq)) %>%
pivot_wider(names_from = group, values_from = c(aa, freq)) %>%
rename(aa_pred_cnn = aa_predicted,
aa_wt_cnn = aa_wt,
freq_pred_cnn = freq_predicted,
freq_wt_cnn = freq_wt)
transf_data <- trans_data %>%
mutate(pred_prob = pmax(A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y)) %>%
pivot_longer(cols = c(A:Y), names_to = "aa", values_to = "freq") %>%
mutate(aa_pred = ifelse(pred_prob == freq, aa, NA)) %>%
na.omit() %>%
select(-c(aa, freq, row)) %>%
rename(freq_pred_transf = pred_prob,
freq_wt_transf = wt_prob,
aa_wt_transf = aa_wt,
aa_pred_transf = aa_pred)
joined_data <- inner_join(cnn_data, transf_data)
# clean cnn data:
cnn_data_unjoined <- joined_data %>%
select(-c(aa_wt_transf, aa_pred_transf, freq_wt_transf, freq_pred_transf)) %>%
rename(freq_pred = freq_pred_cnn,
aa_pred = aa_pred_cnn,
freq_wt = freq_wt_cnn,
aa_wt = aa_wt_cnn) %>%
mutate(group = "cnn")
transf_data_unjoined <- joined_data %>%
select(-c(aa_wt_cnn, aa_pred_cnn, freq_wt_cnn, freq_pred_cnn)) %>%
rename(freq_pred = freq_pred_transf,
aa_pred = aa_pred_transf,
freq_wt = freq_wt_transf,
aa_wt = aa_wt_transf) %>%
mutate(group = "transformer")
joined2 <- rbind(cnn_data_unjoined, transf_data_unjoined)
View(joined2)
View(align_data)
align_data2 <- align_data %>%
select(c(gene, position, q_A:q_V))
View(align_data2)
align_data2 <- align_data %>%
select(c(gene, position, q_A:q_V)) %>%
nest(data = q_A:q_V)
align_data2 <- align_data %>%
select(c(gene, position, q_A:q_V)) %>%
nest(align_data = q_A:q_V)
joined3 <- inner_join(joined2, align_data2)
View(joined3)
#get mispredictions only:
mispredictions <- joined3 %>%
filter(aa_pred != aa_wt)
View(mispredictions)
#get mispredictions only:
mispredictions <- joined3 %>%
filter(aa_pred != aa_wt) %>%
mutate(pred_prob = pmax(align_data))
View(mispredictions[[9]][[1]])
View(mispredictions[[8]][[1]])
trans_data <- read.csv(file = "./output/PSICOV_BERT_predictions.csv", header=TRUE, sep=",")
cnn_data_all <- read.csv(file = "./output/cnn_wt_max_freq.csv", header=TRUE, sep=",")
align_data <- read.csv(file = "./output/stats_align_all.csv", header=TRUE, sep=",")
cnn_data <- cnn_data_all %>%
select(-c(aa_class, class_freq)) %>%
pivot_wider(names_from = group, values_from = c(aa, freq)) %>%
rename(aa_pred_cnn = aa_predicted,
aa_wt_cnn = aa_wt,
freq_pred_cnn = freq_predicted,
freq_wt_cnn = freq_wt)
transf_data <- trans_data %>%
mutate(pred_prob = pmax(A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y)) %>%
pivot_longer(cols = c(A:Y), names_to = "aa", values_to = "freq") %>%
mutate(aa_pred = ifelse(pred_prob == freq, aa, NA)) %>%
na.omit() %>%
select(-c(aa, freq, row)) %>%
rename(freq_pred_transf = pred_prob,
freq_wt_transf = wt_prob,
aa_wt_transf = aa_wt,
aa_pred_transf = aa_pred)
joined_data <- inner_join(cnn_data, transf_data)
# clean cnn data:
cnn_data_unjoined <- joined_data %>%
select(-c(aa_wt_transf, aa_pred_transf, freq_wt_transf, freq_pred_transf)) %>%
rename(freq_pred = freq_pred_cnn,
aa_pred = aa_pred_cnn,
freq_wt = freq_wt_cnn,
aa_wt = aa_wt_cnn) %>%
mutate(group = "cnn")
transf_data_unjoined <- joined_data %>%
select(-c(aa_wt_cnn, aa_pred_cnn, freq_wt_cnn, freq_pred_cnn)) %>%
rename(freq_pred = freq_pred_transf,
aa_pred = aa_pred_transf,
freq_wt = freq_wt_transf,
aa_wt = aa_wt_transf) %>%
mutate(group = "transformer")
joined2 <- rbind(cnn_data_unjoined, transf_data_unjoined)
match_wt <- joined2 %>%
mutate(match_predict_wt = aa_pred == aa_wt)
#data entries where the predicted amino acid matches the wt
stats_1 <- match_wt %>%
group_by(gene, group) %>%
summarise(freq_predict_wt = sum(match_predict_wt, na.rm = TRUE)/sum(!is.na(match_predict_wt)))
means <- stats_1 %>%
group_by(group) %>%
summarise(mean = mean(freq_predict_wt))
stats_1 <- stats_1 %>%
group_by(gene) %>%
mutate(
# pick y value corresponding to y3
color_y = sum(freq_predict_wt * (group == "cnn")),
dx = rnorm(n(), mean = 0, sd = .05),
dy = rnorm(n(), mean = 0, sd = .05),
x_value = as.numeric(factor(group)))
plot <- stats_1 %>%
ggplot(aes(x = group, y = freq_predict_wt)) +
geom_path(
aes(x = as.numeric(factor(group))+dx, y = freq_predict_wt+dy, group = gene, color = color_y),
size = 0.25) +
geom_point(
aes(x = as.numeric(factor(group))+dx, y = freq_predict_wt+dy, group = gene, fill = color_y),
shape = 21,
color = "black",
size = 2) +
scale_x_continuous(
name = "Neural Network",
limits = c(0.7,2.3),
labels = c("CNN", "Transformer"),
breaks = (seq(from = 1.0, to = 2.0, by = 1))
) +
scale_y_continuous(
name = "Accuracy",
limits = c(0.3, 1.0),
breaks = seq(from = 0.3, to = 1.0, by = 0.1),
expand = c(0, 0)) +
scale_color_gradient(
aesthetics = c("color", "fill"),
high = "#ffd966",
low = "#000066") +
theme_bw(16) +
theme(
legend.position = "none",
axis.text = element_text(color = "black", size = 16),
panel.grid.minor = element_blank())
plot
View(joined2)
View(joined2)
#========================================================================
#lets look at CNN confidence vs. Accuracy for both models:
get_pred_bin <- function(x) {
if (x > 0 & x <= 0.2) {
return("(0-0.2]")
}
else if (x > 0.2 & x <= 0.4) {
return("(0.2-0.4]")
}
else if (x > 0.4 & x <= 0.6) {
return("(0.4-0.6]")
}
else if (x > 0.6 & x <= 0.8) {
return("(0.6-0.8]")
}
else if (x > 0.8 & x <= 1.0) {
return("(0.8-1.0]")
}
}
joined_conf <- joined2 %>%
mutate(pred_bin = map_chr(freq_pred, get_pred_bin))
joined_conf <- joined2 %>%
mutate(pred_bin = map_chr(freq_pred, get_pred_bin))
joined2$freq_pred <- as.numeric(joined2$freq_pred)
joined_conf <- joined2 %>%
mutate(pred_bin = map_chr(freq_pred, get_pred_bin))
joined_conf <- joined2 %>%
mutate(pred_bin = map(freq_pred, get_pred_bin))
View(joined_conf)
match_wt <- joined_conf %>%
mutate(match_predict_wt = aa_pred == aa_wt)
View(match_wt)
#data entries where the predicted amino acid matches the wt
stats_1 <- match_wt %>%
group_by(gene, group, pred_bin) %>%
summarise(freq_predict_wt = sum(match_predict_wt, na.rm = TRUE)/sum(!is.na(match_predict_wt)))
View(stats_1)
stat_data_1 <- stats_1 %>%
select(-gene) %>%
group_by(pred_bin) %>%
summarise(estimate = mean(freq_predict_wt),
std_error = sd(freq_predict_wt)/sqrt(length(freq_predict_wt)))
View(stat_data_1)
stat_data_1 <- stats_1 %>%
select(-gene) %>%
group_by(pred_bin) %>%
summarise(estimate = mean(freq_predict_wt),
std_error = sd(freq_predict_wt)/sqrt(length(freq_predict_wt))) %>%
na.omit()
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03) +
geom_pointrange(data = stat_data_1, aes(x = pred_bin,
y = estimate,
ymin = estimate - 1.96*std_error,
ymax = estimate + 1.96*std_error),
color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") +
scale_y_continuous(
name = "Accuracy",
limits = c(0, 1.0),
breaks = seq(from = 0, to = 1.0, by = 0.1),
expand = c(0, 0)) +
scale_x_discrete(
name = "CNN confidence")
plot_conf
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, group = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03) +
geom_pointrange(data = stat_data_1, aes(x = pred_bin,
y = estimate,
ymin = estimate - 1.96*std_error,
ymax = estimate + 1.96*std_error),
color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") +
scale_y_continuous(
name = "Accuracy",
limits = c(0, 1.0),
breaks = seq(from = 0, to = 1.0, by = 0.1),
expand = c(0, 0)) +
scale_x_discrete(
name = "CNN confidence")
plot_conf
stat_data_1 <- stats_1 %>%
select(-gene) %>%
group_by(pred_bin, group) %>%
summarise(estimate = mean(freq_predict_wt),
std_error = sd(freq_predict_wt)/sqrt(length(freq_predict_wt))) %>%
na.omit()
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03) +
geom_pointrange(data = stat_data_1, aes(x = pred_bin,
y = estimate,
ymin = estimate - 1.96*std_error,
ymax = estimate + 1.96*std_error),
color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") +
scale_y_continuous(
name = "Accuracy",
limits = c(0, 1.0),
breaks = seq(from = 0, to = 1.0, by = 0.1),
expand = c(0, 0)) +
scale_x_discrete(
name = "CNN confidence")
plot_conf
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03, position = position_dodge()) +
geom_pointrange(data = stat_data_1, aes(x = pred_bin,
y = estimate,
ymin = estimate - 1.96*std_error,
ymax = estimate + 1.96*std_error),
color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") +
scale_y_continuous(
name = "Accuracy",
limits = c(0, 1.0),
breaks = seq(from = 0, to = 1.0, by = 0.1),
expand = c(0, 0)) +
scale_x_discrete(
name = "CNN confidence")
plot_conf
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03, position = position_dodge()) +
geom_pointrange(data = stat_data_1, aes(x = pred_bin,
y = estimate,
ymin = estimate - 1.96*std_error,
ymax = estimate + 1.96*std_error),
color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") #+
plot_conf
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03, position = position_dodge()) +
# geom_pointrange(data = stat_data_1, aes(x = pred_bin,
#                                         y = estimate,
#                                         ymin = estimate - 1.96*std_error,
#                                         ymax = estimate + 1.96*std_error),
#                 color = "black", alpha = 0.7, size = 0.3) +
#stat_summary(fun.data=data_summary, color = "black", alpha = 0.7) +
theme_cowplot(16) +
theme(plot.title = element_text(hjust = 0, size = 16),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major.y = element_line(color = "grey92", size=0.5),
legend.position = "none") #+
plot_conf
plot_conf <- stats_1 %>%
ggplot(aes(y = freq_predict_wt, x = pred_bin, fill = group)) +
geom_violin(alpha = 0.5, size = 0.7, bw = 0.03) #+
plot_conf
